Channel	Channel.cpp	/^Channel::Channel(void)$/
Channel	Channel.cpp	/^Channel::Channel(const Channel &src)$/
Channel::Channel	Channel.cpp	/^Channel::Channel(const std::string &name, const st/
Client	Client.cpp	/^Client::Client(const Client &src)$/
Client::Client	Client.cpp	/^Client::Client(void): _username(false, ""), _nickn/
Client::Error::Error	Client.cpp	/^Client::Error::Error(const std::string &str) throw/
Mbot.cpp	bot.cpp	/^int	main(int argc, char **argv)$/
Mmain.cpp	main.cpp	/^int	main(int argc, char **argv)$/
Server	Server.cpp	/^Server::Server(const Server &src)$/
Server::Error::Error	Server.cpp	/^Server::Error::Error(const std::string &str) throw/
Server::Server	Server.cpp	/^Server::Server(void): _password(""), _socket(0), _/
_acceptNewClient	Server.cpp	/^void	Server::_acceptNewClient(void)$/
_addOptionToChannel	commands/addOptionToChannel.cpp	/^void	Channel::_addOptionToChannel(std::istringstre/
_bindSocket	Server.cpp	/^void	Server::_bindSocket(void) const$/
_closeSocket	Server.cpp	/^void	Server::_closeSocket(void) const$/
_createChannel	commands/join.cpp	/^void	Server::_createChannel(const std::string &cha/
_createSocket	Server.cpp	/^void	Server::_createSocket(void)$/
_deleteOptionFromChannel	commands/deleteOptionFromChannel.cpp	/^void	Channel::_deleteOptionFromChannel(std::istrin/
_detectCommand	detectCommand.cpp	/^void	Server::_detectCommand(Client & client)$/
_disconnectClientFromAllChannels	commands/quit.cpp	/^void	Server::_disconnectClientFromAllChannels(cons/
_displayAllClients	Server.cpp	/^void	Server::_displayAllClients(std::istringstream/
_displayChannels	commands/displayChannels.cpp	/^void	Server::_displayChannels(std::istringstream &/
_displayClient	Server.cpp	/^void	Server::_displayClient(const Client &client, /
_doesChannelExist	commands/part.cpp	/^bool	Server::_doesChannelExist(const Client &clien/
_extractString	commands/privmsg.cpp	/^std::string	Server::_extractString(std::istringstr/
_getClientIndex	Server.cpp	/^int	Server::_getClientIndex(int socket) const$/
_getClientIndex	Server.cpp	/^int	Server::_getClientIndex(const std::string &use/
_initSinValues	Server.cpp	/^void	Server::_initSinValues(void)$/
_initSinValues	Client.cpp	/^void	Client::_initSinValues(void)$/
_invite	commands/invite.cpp	/^void	Server::_invite(std::istringstream &iss, Clie/
_isChannelNameValid	commands/join.cpp	/^bool	Server::_isChannelNameValid(const std::string/
_isLimitValid	commands/addOptionToChannel.cpp	/^bool	Channel::_isLimitValid(std::string const & li/
_isUsernameAlreadyTaken	commands/user.cpp	/^bool	Server::_isUsernameAlreadyTaken(const std::st/
_join	commands/join.cpp	/^void	Server::_join(std::istringstream &iss, Client/
_kick	commands/kick.cpp	/^void	Server::_kick(std::istringstream &iss, Client/
_kickUserFromChannel	commands/kick.cpp	/^void	Server::_kickUserFromChannel(Client &kicked, /
_listenSocket	Server.cpp	/^void	Server::_listenSocket(void) const$/
_mode	commands/mode.cpp	/^void	Server::_mode(std::istringstream & iss, Clien/
_nick	commands/nick.cpp	/^void	Server::_nick(std::istringstream &iss, Client/
_part	commands/part.cpp	/^void	Server::_part(std::istringstream &iss, Client/
_pass	commands/pass.cpp	/^void	Server::_pass(std::istringstream & iss, Clien/
_privmsg	commands/privmsg.cpp	/^void	Server::_privmsg(std::istringstream & iss, co/
_processInput	Server.cpp	/^void	Server::_processInput(int socket, const char /
_quit	commands/quit.cpp	/^void	Server::_quit(Client &client)$/
_receiveData	run.cpp	/^void	Server::_receiveData(int socket)$/
_removeClientFromChannel	commands/part.cpp	/^void	Server::_removeClientFromChannel(Client &clie/
_sendMessageToChannel	Server.cpp	/^void	Server::_sendMessageToChannel(const Channel &/
_sendMessageToClient	Server.cpp	/^void	Server::_sendMessageToClient(const Client &cl/
_sendMessageToClient	Channel.cpp	/^void	Channel::_sendMessageToClient(const Client &c/
_sendToChannel	commands/privmsg.cpp	/^void	Server::_sendToChannel(std::istringstream &is/
_sendToClient	commands/privmsg.cpp	/^void	Server::_sendToClient(std::istringstream &iss/
_setMaxFd	Server.cpp	/^void	Server::_setMaxFd(void)$/
_setOperatorChannel	commands/addOptionToChannel.cpp	/^void	Channel::_setOperatorChannel(std::istringstre/
_setPasswordChannel	commands/addOptionToChannel.cpp	/^void	Channel::_setPasswordChannel(std::istringstre/
_setSockOptReuseAddr	Server.cpp	/^void	Server::_setSockOptReuseAddr(void) const$/
_setUserLimitChannel	commands/addOptionToChannel.cpp	/^void	Channel::_setUserLimitChannel(std::istringstr/
_topic	commands/topic.cpp	/^void	Server::_topic(std::istringstream & iss, Clie/
_unsetOperatorChannel	commands/deleteOptionFromChannel.cpp	/^void	Channel::_unsetOperatorChannel(std::istringst/
_user	commands/user.cpp	/^void	Server::_user(std::istringstream &iss, Client/
_userHexchat	commands/user.cpp	/^void	Server::_userHexchat(std::istringstream &iss,/
_whois	commands/whois.cpp	/^void	Server::_whois(std::istringstream &iss, const/
addInvitedUser	Channel.cpp	/^void	Channel::addInvitedUser(const std::string &us/
addJoinedChannelName	Client.cpp	/^void	Client::addJoinedChannelName(const std::strin/
addNewUsername	Channel.cpp	/^void	Channel::addNewUsername(const std::string &us/
addOp	Channel.cpp	/^void	Channel::addOp(const std::string &username)$/
clearJoinedChannelsNames	Client.cpp	/^void	Client::clearJoinedChannelsNames(void)$/
clearMemberNames	Channel.cpp	/^void	Channel::clearMemberNames(void)$/
closeSocket	Client.cpp	/^void	Client::closeSocket(void) const$/
completeInput	Client.cpp	/^void	Client::completeInput(const char *toAdd)$/
connectToServer	bot.cpp	/^void	connectToServer(int port)$/
createSocket	bot.cpp	/^int	createSocket(void)$/
deleteInvitedUser	Channel.cpp	/^void	Channel::deleteInvitedUser(const std::string /
deleteOp	Channel.cpp	/^void	Channel::deleteOp(const std::string &username/
deleteUsername	Channel.cpp	/^void	Channel::deleteUsername(const std::string &us/
ft_strlen	bot.cpp	/^int	ft_strlen(char *buf)$/
g_signal	main.cpp	9
getAuthentification	Client.cpp	/^bool				Client::getAuthentification(void) const { /
getInput	Client.cpp	/^const std::string	&Client::getInput(void)	const	{r/
getJoinedChannelsNames	Client.cpp	/^const std::vector<std::string>	&Client::getJoinedC/
getMemberNames	Channel.cpp	/^const std::vector<std::string>	&Channel::getMember/
getName	Channel.cpp	/^const std::string	&Channel::getName(void) const	{r/
getNbMembers	Channel.cpp	/^int	Channel::getNbMembers(void) const	{return (_me/
getNickname	Client.cpp	/^const std::pair<bool, std::string>	&Client::getNic/
getOps	Channel.cpp	/^const std::vector<std::string>	&Channel::getOps(vo/
getPassword	Client.cpp	/^bool				Client::getPassword(void) const	{return (t/
getPassword	Channel.cpp	/^const std::string	&Channel::getPassword(void) cons/
getSin	Client.cpp	/^struct sockaddr_in	Client::getSin(void) const	{ret/
getSocket	Server.cpp	/^int	Server::getSocket(void) const$/
getSocket	Client.cpp	/^int	Client::getSocket(void) const	{return (this->_/
getTopic	Channel.cpp	/^const std::string	&Channel::getTopic(void) const	{/
getUserLimit	Channel.cpp	/^int	Channel::getUserLimit(void) const	{return (_us/
getUsername	Client.cpp	/^const std::pair<bool, std::string>	&Client::getUse/
handleSignal	main.cpp	/^void	handleSignal(int sig)$/
isBitSet	Channel.cpp	/^bool	Channel::isBitSet(t_modes option) const$/
isClientInvited	Channel.cpp	/^bool	Channel::isClientInvited(const std::string &u/
isClientMember	Channel.cpp	/^bool	Channel::isClientMember(const std::string &us/
isClientOp	Channel.cpp	/^bool	Channel::isClientOp(const std::string &userna/
isInChannel	Client.cpp	/^bool	Client::isInChannel(const std::string &name) /
isPortNumeric	bot.cpp	/^bool	isPortNumeric(std::string port)$/
isPortValid	main.cpp	/^int	isPortValid(std::string &portStr)$/
leaveChannel	Client.cpp	/^void	Client::leaveChannel(const std::string &chann/
manageOption	Channel.cpp	/^void	Channel::manageOption(std::istringstream & is/
manageTopicChannel	commands/topic.cpp	/^void	Channel::manageTopicChannel(std::istringstrea/
operator=	Server.cpp	/^Server	&Server::operator=(const Server &src)$/
operator=	Client.cpp	/^Client	&Client::operator=(const Client &src)$/
operator=	Channel.cpp	/^Channel	&Channel::operator=(const Channel &src)$/
passwordGenerator	passwordGenerator.cpp	/^std::string	passwordGenerator(void)$/
resetInput	Client.cpp	/^void	Client::resetInput(void)$/
run	run.cpp	/^bool	Server::run(void)$/
serverCommunication	bot.cpp	/^void	serverCommunication(int sockfd)$/
setAuthentification	Client.cpp	/^void	Client::setAuthentification(bool status)$/
setNickname	Client.cpp	/^void	Client::setNickname(const std::string &nickna/
setPassword	Client.cpp	/^void	Client::setPassword(bool status)	{this->_pass/
setSocket	Client.cpp	/^void	Client::setSocket(int socket)	{this->_socket /
setUsername	Client.cpp	/^void	Client::setUsername(const std::string &userna/
start	Server.cpp	/^void	Server::start(int port, std::string &password/
what	Server.cpp	/^const char	*Server::Error::what(void) const throw(/
what	Client.cpp	/^const char	*Client::Error::what(void) const throw(/
~Channel	Channel.cpp	/^Channel::~Channel(void)$/
~Client	Client.cpp	/^Client::~Client(void)$/
~Error	Server.cpp	/^Server::Error::~Error(void) throw()$/
~Error	Client.cpp	/^Client::Error::~Error(void) throw()$/
~Server	Server.cpp	/^Server::~Server(void)$/
